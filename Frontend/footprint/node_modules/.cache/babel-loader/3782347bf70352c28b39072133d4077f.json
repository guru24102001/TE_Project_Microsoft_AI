{"ast":null,"code":"var _jsxFileName = \"D:\\\\Akaash\\\\VESIT_TE_PROJECT\\\\Project_Git_Link\\\\Frontend\\\\footprint\\\\src\\\\components\\\\LinePlot.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Plotly = window.Plotly;\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nconst LinePlot = () => {\n  _s();\n\n  const [polynomialData, setPolynpolynomialData] = useState({});\n  const [traceActual, setTraceActual] = useState({});\n  const [tracePredict, setTracePredict] = useState({});\n  useEffect(() => {\n    const url = \"http://localhost:8000\";\n    const config = {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\"\n    };\n\n    try {\n      const getPolynomialData = async () => {\n        const response = await axios.get(`${url}/api/get-data/polynomial/`, config);\n\n        if (response.status === 200) {\n          console.log(response.data);\n          setPolynpolynomialData(response.data); // setTraceActual({\n          // \tx: polynomialData.yearActual,\n          // \ty: polynomialData.dataActual,\n          // \ttype: \"scatter\",\n          // });\n          // setTracePredict({\n          // \tx: polynomialData.yearPredict,\n          // \ty: polynomialData.dataPredict,\n          // \ttype: \"scatter\",\n          // });\n        }\n      };\n\n      getPolynomialData();\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  useEffect(() => {\n    setTraceActual({\n      x: polynomialData.yearActual,\n      y: polynomialData.dataActual,\n      type: \"scatter\",\n      name: \"Actual Data\"\n    }); // Important;\n    // console.log(traceActual);\n    // console.log(tracePredict);\n  }, [polynomialData]);\n  useEffect(() => {\n    console.log(polynomialData);\n    setTracePredict({\n      x: polynomialData.yearPredict,\n      y: polynomialData.dataPredict,\n      type: \"lines+markers\",\n      name: \"Predicted Data\"\n    });\n  }, [polynomialData]);\n  const data = [traceActual, tracePredict];\n  console.log(data);\n  const layout = {\n    title: {\n      text: `Country-wise Polynomial Regression`\n    },\n    autosize: true,\n    xaxis: {\n      title: \"Year\"\n    },\n    yaxis: {\n      title: \"Plastic Prediction\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"linePlot\",\n    children: /*#__PURE__*/_jsxDEV(Plot, {\n      data: data,\n      layout: layout,\n      useResizeHandler: true,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 3\n  }, this);\n};\n\n_s(LinePlot, \"L85DhKvRo7+5uWGL5XM4eK7j3X8=\");\n\n_c2 = LinePlot;\nexport default LinePlot;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"LinePlot\");","map":{"version":3,"sources":["D:/Akaash/VESIT_TE_PROJECT/Project_Git_Link/Frontend/footprint/src/components/LinePlot.js"],"names":["React","useEffect","useState","axios","createPlotlyComponent","Plotly","window","Plot","LinePlot","polynomialData","setPolynpolynomialData","traceActual","setTraceActual","tracePredict","setTracePredict","url","config","getPolynomialData","response","get","status","console","log","data","error","x","yearActual","y","dataActual","type","name","yearPredict","dataPredict","layout","title","text","autosize","xaxis","yaxis","width","height"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nconst Plotly = window.Plotly;\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst LinePlot = () => {\r\n\tconst [polynomialData, setPolynpolynomialData] = useState({});\r\n\tconst [traceActual, setTraceActual] = useState({});\r\n\tconst [tracePredict, setTracePredict] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst url = \"http://localhost:8000\";\r\n\t\tconst config = {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\"Access-Control-Allow-Origin\": \"*\",\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tconst getPolynomialData = async () => {\r\n\t\t\t\tconst response = await axios.get(\r\n\t\t\t\t\t`${url}/api/get-data/polynomial/`,\r\n\t\t\t\t\tconfig\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tconsole.log(response.data);\r\n\t\t\t\t\tsetPolynpolynomialData(response.data);\r\n\t\t\t\t\t// setTraceActual({\r\n\t\t\t\t\t// \tx: polynomialData.yearActual,\r\n\t\t\t\t\t// \ty: polynomialData.dataActual,\r\n\t\t\t\t\t// \ttype: \"scatter\",\r\n\t\t\t\t\t// });\r\n\t\t\t\t\t// setTracePredict({\r\n\t\t\t\t\t// \tx: polynomialData.yearPredict,\r\n\t\t\t\t\t// \ty: polynomialData.dataPredict,\r\n\t\t\t\t\t// \ttype: \"scatter\",\r\n\t\t\t\t\t// });\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tgetPolynomialData();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetTraceActual({\r\n\t\t\tx: polynomialData.yearActual,\r\n\t\t\ty: polynomialData.dataActual,\r\n\t\t\ttype: \"scatter\",\r\n\t\t\tname: \"Actual Data\",\r\n\t\t});\r\n\t\t// Important;\r\n\t\t// console.log(traceActual);\r\n\t\t// console.log(tracePredict);\r\n\t}, [polynomialData]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(polynomialData);\r\n\t\tsetTracePredict({\r\n\t\t\tx: polynomialData.yearPredict,\r\n\t\t\ty: polynomialData.dataPredict,\r\n\t\t\ttype: \"lines+markers\",\r\n\t\t\tname: \"Predicted Data\",\r\n\t\t});\r\n\t}, [polynomialData]);\r\n\r\n\tconst data = [traceActual, tracePredict];\r\n\tconsole.log(data);\r\n\tconst layout = {\r\n\t\ttitle: { text: `Country-wise Polynomial Regression` },\r\n\t\tautosize: true,\r\n\t\txaxis: {\r\n\t\t\ttitle: \"Year\",\r\n\t\t},\r\n\t\tyaxis: {\r\n\t\t\ttitle: \"Plastic Prediction\",\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"linePlot\">\r\n\t\t\t{/* // Pie chart */}\r\n\t\t\t<Plot\r\n\t\t\t\tdata={data}\r\n\t\t\t\tlayout={layout}\r\n\t\t\t\tuseResizeHandler\r\n\t\t\t\tstyle={{ width: \"100%\", height: \"100%\" }}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default LinePlot;\r\n"]},"metadata":{},"sourceType":"module"}