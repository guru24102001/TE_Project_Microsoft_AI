{"ast":null,"code":"var _jsxFileName = \"D:\\\\Akaash\\\\VESIT_TE_PROJECT\\\\Project_Git_Link\\\\Frontend\\\\footprint\\\\src\\\\pages\\\\Models.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"../components/Header\";\nimport Table from \"../components/Table\";\nimport \"../css/Header.css\";\nimport \"../css/Models.css\";\nimport \"../css/Footer.css\";\nimport axios from \"axios\";\nimport Dropdown from \"../components/Dropdown\";\nimport LinePlot from \"../components/LinePlot\";\nimport Footer from \"../components/Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Models = _ref => {\n  _s();\n\n  let {\n    home\n  } = _ref;\n  const years = {};\n\n  for (let year = 2025; year >= 2011; year--) {\n    years[year] = year;\n  } // const models = {\n  // \t\"CatBoost Regression\": \"CatBoost Regression\",\n  // \t// \"Polynomial Regression\": \"Polynomial Regression\",\n  // \t\"RandomForest Regression\": \"RandomForest Regression\",\n  // };\n\n\n  const states = [\"Andaman and Nicobar Islands\", \"Andhra Pradesh\", \"Arunachal Pradesh\", \"Assam\", \"Bihar\", \"Chandigarh\", \"Chhattisgarh\", \"Dadra and Nagar Haveli and Daman and Diu\", \"Delhi\", \"Goa\", \"Gujarat\", \"Haryana\", \"Himachal Pradesh\", \"Jammu and Kashmir\", \"Jharkhand\", \"Karnataka\", \"Kerala\", \"Lakshadweep\", \"Madhya Pradesh\", \"Maharashtra\", \"Manipur\", \"Meghalaya\", \"Mizoram\", \"Nagaland\", \"Odisha\", \"Puducherry\", \"Punjab\", \"Rajasthan\", \"Sikkim\", \"Tamil Nadu\", \"Telangana\", \"Tripura\", \"Uttar Pradesh\", \"Uttarakhand\", \"West Bengal\"];\n  const regions = {};\n\n  for (let state = 0; state < states.length; state++) {\n    regions[states[state]] = states[state];\n  }\n\n  console.log(regions);\n  const [year, setYear] = useState(2020); // const [region, setRegion] = useState(\"\");\n  // const [actual, setActual] = useState(\"\");\n  // const [predicted, setPredicted] = useState(\"\");\n  // const [currentRegion, setCurrentRegion] = useState(\"\");\n  // console.log(currentRegion);\n  // const [countryActual, setCountryActual] = useState(\"\");\n  // const [countryPredicted, setCountryPredicted] = useState(\"\");\n\n  const [rows, setRows] = useState({}); // const [currentModel, setCurrentModel] = useState(\"RandomForest Regression\");\n  // This useEffect gets the data from dataset to fill the table\n\n  useEffect(() => {\n    // console.log(year);\n    // console.log(region);\n    const url = \"http://localhost:8000\";\n    const config = {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\"\n    };\n\n    try {\n      const getOneYearData = async () => {\n        const response = await axios.get(`${url}/api/get-data-year?year=${year}`, config);\n        console.log(response.data);\n\n        if (response.status === 200) {\n          setRows(response.data);\n        }\n      };\n\n      if (year) {\n        getOneYearData();\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n  }, [year]);\n  useEffect(() => {\n    console.log(rows);\n  }, [rows]); // This useEffect returns all the data of the given region\n  // useEffect(() => {\n  // \tconst url = \"http://localhost:8000\";\n  // \tconst config = {\n  // \t\t\"Content-Type\": \"application/json\",\n  // \t\t\"Access-Control-Allow-Origin\": \"*\",\n  // \t};\n  // \ttry {\n  // \t\tconst getOneStateData = async () => {\n  // \t\t\tconsole.log(region);\n  // \t\t\tconst response = await axios.get(\n  // \t\t\t\t`${url}/api/get-data-state?state=${region}`,\n  // \t\t\t\tconfig\n  // \t\t\t);\n  // \t\t\tif (response.status === 200) {\n  // \t\t\t\tsetCurrentRegion(response.data);\n  // \t\t\t\tsetActual({\n  // \t\t\t\t\tx: response.data.year,\n  // \t\t\t\t\ty: response.data.plastic,\n  // \t\t\t\t\ttype: \"scatter\",\n  // \t\t\t\t});\n  // \t\t\t\tconsole.log(response.data);\n  // \t\t\t}\n  // \t\t};\n  // \t\tif (region) {\n  // \t\t\tgetOneStateData();\n  // \t\t}\n  // \t} catch (error) {\n  // \t\tconsole.log(error.message);\n  // \t}\n  // }, [region]);\n  // useEffect(() => {\n  // \tconsole.log(region);\n  // }, [region]);\n  // useEffect(() => {\n  // \tconst url = \"http://localhost:8000\";\n  // \tconst config = {\n  // \t\t\"Content-Type\": \"application/json\",\n  // \t\t\"Access-Control-Allow-Origin\": \"*\",\n  // \t};\n  // \ttry {\n  // \t\tconst getOneStateDataOverYears = async () => {\n  // \t\t\tconsole.log(region);\n  // \t\t\tconst response = await axios.get(\n  // \t\t\t\t`${url}/api/get-data/models/rf-state/?year=${year}`,\n  // \t\t\t\tconfig\n  // \t\t\t);\n  // \t\t\tconsole.log(response.data);\n  // \t\t\tif (response.status === 200) {\n  // \t\t\t\tsetPredicted({\n  // \t\t\t\t\tvalues: response.data.data,\n  // \t\t\t\t\tlabels: response.data.states,\n  // \t\t\t\t\ttype: \"pie\",\n  // \t\t\t\t});\n  // \t\t\t\t// console.log(response.data);\n  // \t\t\t}\n  // \t\t};\n  // \t\tif (year) {\n  // \t\t\tgetOneStateDataOverYears();\n  // \t\t}\n  // \t} catch (error) {\n  // \t\tconsole.log(error.message);\n  // \t}\n  // }, [year]);\n  // to get the predicted value of a state\n  // useEffect(() => {\n  // \tconst url = \"http://localhost:8000\";\n  // \tconst config = {\n  // \t\t\"Content-Type\": \"application/json\",\n  // \t\t\"Access-Control-Allow-Origin\": \"*\",\n  // \t};\n  // \ttry {\n  // \t\tconst getOneStateDataOverYears = async () => {\n  // \t\t\tconsole.log(region);\n  // \t\t\tconst response = await axios.get(\n  // \t\t\t\t`${url}/api/get-random-over?state=${region}&year=${year}`,\n  // \t\t\t\tconfig\n  // \t\t\t);\n  // \t\t\tif (response.status === 200) {\n  // \t\t\t\tsetPredicted({\n  // \t\t\t\t\tx: Object.keys(years),\n  // \t\t\t\t\ty: response.data.predictedValue,\n  // \t\t\t\t\ttype: \"scatter\",\n  // \t\t\t\t});\n  // \t\t\t\tconsole.log(response.data);\n  // \t\t\t}\n  // \t\t};\n  // \t\tif (region) {\n  // \t\t\tgetOneStateDataOverYears();\n  // \t\t}\n  // \t} catch (error) {\n  // \t\tconsole.log(error.message);\n  // \t}\n  // }, [year, region]);\n  // State wise Catboost regression\n  // useEffect(() => {\n  // \tconst url = \"http://localhost:8000\";\n  // \tconst config = {\n  // \t\t\"Content-Type\": \"application/json\",\n  // \t\t\"Access-Control-Allow-Origin\": \"*\",\n  // \t};\n  // \ttry {\n  // \t\tconst getOneStateDataOverYearsCB = async () => {\n  // \t\t\tconsole.log(region);\n  // \t\t\tconst response = await axios.get(\n  // \t\t\t\t`${url}/api/get-cb-over?state=${region}&year=${year}`,\n  // \t\t\t\tconfig\n  // \t\t\t);\n  // \t\t\tif (response.status === 200) {\n  // \t\t\t\tsetPredicted({\n  // \t\t\t\t\tx: Object.keys(years),\n  // \t\t\t\t\ty: response.data.predictedValue,\n  // \t\t\t\t\ttype: \"scatter\",\n  // \t\t\t\t});\n  // \t\t\t\tconsole.log(response.data);\n  // \t\t\t}\n  // \t\t};\n  // \t\tif (currentModel === \"CatBoost Regression\") {\n  // \t\t\tgetOneStateDataOverYearsCB();\n  // \t\t}\n  // \t} catch (error) {\n  // \t\tconsole.log(error.message);\n  // \t}\n  // }, [year, region, currentModel]);\n  // FOr country wise catBoost regression\n  // console.log(actual);\n  // console.log(predicted);\n  // const layout = {\n  // \ttitle: `Plastic Prediction for Year: ${year}-${year + 1}`,\n  // \theight: 600,\n  // \twidth: 700,\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      home: home\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"models\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"models__dropdown\",\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          setVariable: setYear,\n          label: \"Years\",\n          labels: years\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"models__data\",\n        children: [/*#__PURE__*/_jsxDEV(LinePlot, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          row: rows\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"models__plot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"Landing__footer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer__container\",\n        children: /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Models, \"OCGpUjmjBEru0+SFu4rIjRfl/LM=\");\n\n_c = Models;\nexport default Models;\n\nvar _c;\n\n$RefreshReg$(_c, \"Models\");","map":{"version":3,"sources":["D:/Akaash/VESIT_TE_PROJECT/Project_Git_Link/Frontend/footprint/src/pages/Models.js"],"names":["React","useState","useEffect","Header","Table","axios","Dropdown","LinePlot","Footer","Models","home","years","year","states","regions","state","length","console","log","setYear","rows","setRows","url","config","getOneYearData","response","get","data","status","error","message"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport Table from \"../components/Table\";\r\nimport \"../css/Header.css\";\r\nimport \"../css/Models.css\";\r\nimport \"../css/Footer.css\";\r\nimport axios from \"axios\";\r\nimport Dropdown from \"../components/Dropdown\";\r\nimport LinePlot from \"../components/LinePlot\";\r\nimport Footer from \"../components/Footer\";\r\n\r\nconst Models = ({ home }) => {\r\n\tconst years = {};\r\n\tfor (let year = 2025; year >= 2011; year--) {\r\n\t\tyears[year] = year;\r\n\t}\r\n\r\n\t// const models = {\r\n\t// \t\"CatBoost Regression\": \"CatBoost Regression\",\r\n\t// \t// \"Polynomial Regression\": \"Polynomial Regression\",\r\n\t// \t\"RandomForest Regression\": \"RandomForest Regression\",\r\n\t// };\r\n\r\n\tconst states = [\r\n\t\t\"Andaman and Nicobar Islands\",\r\n\t\t\"Andhra Pradesh\",\r\n\t\t\"Arunachal Pradesh\",\r\n\t\t\"Assam\",\r\n\t\t\"Bihar\",\r\n\t\t\"Chandigarh\",\r\n\t\t\"Chhattisgarh\",\r\n\t\t\"Dadra and Nagar Haveli and Daman and Diu\",\r\n\t\t\"Delhi\",\r\n\t\t\"Goa\",\r\n\t\t\"Gujarat\",\r\n\t\t\"Haryana\",\r\n\t\t\"Himachal Pradesh\",\r\n\t\t\"Jammu and Kashmir\",\r\n\t\t\"Jharkhand\",\r\n\t\t\"Karnataka\",\r\n\t\t\"Kerala\",\r\n\t\t\"Lakshadweep\",\r\n\t\t\"Madhya Pradesh\",\r\n\t\t\"Maharashtra\",\r\n\t\t\"Manipur\",\r\n\t\t\"Meghalaya\",\r\n\t\t\"Mizoram\",\r\n\t\t\"Nagaland\",\r\n\t\t\"Odisha\",\r\n\t\t\"Puducherry\",\r\n\t\t\"Punjab\",\r\n\t\t\"Rajasthan\",\r\n\t\t\"Sikkim\",\r\n\t\t\"Tamil Nadu\",\r\n\t\t\"Telangana\",\r\n\t\t\"Tripura\",\r\n\t\t\"Uttar Pradesh\",\r\n\t\t\"Uttarakhand\",\r\n\t\t\"West Bengal\",\r\n\t];\r\n\r\n\tconst regions = {};\r\n\tfor (let state = 0; state < states.length; state++) {\r\n\t\tregions[states[state]] = states[state];\r\n\t}\r\n\r\n\tconsole.log(regions);\r\n\r\n\tconst [year, setYear] = useState(2020);\r\n\t// const [region, setRegion] = useState(\"\");\r\n\t// const [actual, setActual] = useState(\"\");\r\n\t// const [predicted, setPredicted] = useState(\"\");\r\n\t// const [currentRegion, setCurrentRegion] = useState(\"\");\r\n\t// console.log(currentRegion);\r\n\t// const [countryActual, setCountryActual] = useState(\"\");\r\n\t// const [countryPredicted, setCountryPredicted] = useState(\"\");\r\n\r\n\tconst [rows, setRows] = useState({});\r\n\t// const [currentModel, setCurrentModel] = useState(\"RandomForest Regression\");\r\n\r\n\t// This useEffect gets the data from dataset to fill the table\r\n\tuseEffect(() => {\r\n\t\t// console.log(year);\r\n\t\t// console.log(region);\r\n\t\tconst url = \"http://localhost:8000\";\r\n\t\tconst config = {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\"Access-Control-Allow-Origin\": \"*\",\r\n\t\t};\r\n\t\ttry {\r\n\t\t\tconst getOneYearData = async () => {\r\n\t\t\t\tconst response = await axios.get(\r\n\t\t\t\t\t`${url}/api/get-data-year?year=${year}`,\r\n\t\t\t\t\tconfig\r\n\t\t\t\t);\r\n\t\t\t\tconsole.log(response.data);\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tsetRows(response.data);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tif (year) {\r\n\t\t\t\tgetOneYearData();\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error.message);\r\n\t\t}\r\n\t}, [year]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(rows);\r\n\t}, [rows]);\r\n\r\n\t// This useEffect returns all the data of the given region\r\n\t// useEffect(() => {\r\n\t// \tconst url = \"http://localhost:8000\";\r\n\t// \tconst config = {\r\n\t// \t\t\"Content-Type\": \"application/json\",\r\n\t// \t\t\"Access-Control-Allow-Origin\": \"*\",\r\n\t// \t};\r\n\r\n\t// \ttry {\r\n\t// \t\tconst getOneStateData = async () => {\r\n\t// \t\t\tconsole.log(region);\r\n\t// \t\t\tconst response = await axios.get(\r\n\t// \t\t\t\t`${url}/api/get-data-state?state=${region}`,\r\n\t// \t\t\t\tconfig\r\n\t// \t\t\t);\r\n\t// \t\t\tif (response.status === 200) {\r\n\t// \t\t\t\tsetCurrentRegion(response.data);\r\n\t// \t\t\t\tsetActual({\r\n\t// \t\t\t\t\tx: response.data.year,\r\n\t// \t\t\t\t\ty: response.data.plastic,\r\n\t// \t\t\t\t\ttype: \"scatter\",\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\tconsole.log(response.data);\r\n\t// \t\t\t}\r\n\t// \t\t};\r\n\t// \t\tif (region) {\r\n\t// \t\t\tgetOneStateData();\r\n\t// \t\t}\r\n\t// \t} catch (error) {\r\n\t// \t\tconsole.log(error.message);\r\n\t// \t}\r\n\t// }, [region]);\r\n\r\n\t// useEffect(() => {\r\n\t// \tconsole.log(region);\r\n\t// }, [region]);\r\n\r\n\t// useEffect(() => {\r\n\t// \tconst url = \"http://localhost:8000\";\r\n\t// \tconst config = {\r\n\t// \t\t\"Content-Type\": \"application/json\",\r\n\t// \t\t\"Access-Control-Allow-Origin\": \"*\",\r\n\t// \t};\r\n\t// \ttry {\r\n\t// \t\tconst getOneStateDataOverYears = async () => {\r\n\t// \t\t\tconsole.log(region);\r\n\t// \t\t\tconst response = await axios.get(\r\n\t// \t\t\t\t`${url}/api/get-data/models/rf-state/?year=${year}`,\r\n\t// \t\t\t\tconfig\r\n\t// \t\t\t);\r\n\t// \t\t\tconsole.log(response.data);\r\n\t// \t\t\tif (response.status === 200) {\r\n\t// \t\t\t\tsetPredicted({\r\n\t// \t\t\t\t\tvalues: response.data.data,\r\n\t// \t\t\t\t\tlabels: response.data.states,\r\n\t// \t\t\t\t\ttype: \"pie\",\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\t// console.log(response.data);\r\n\t// \t\t\t}\r\n\t// \t\t};\r\n\t// \t\tif (year) {\r\n\t// \t\t\tgetOneStateDataOverYears();\r\n\t// \t\t}\r\n\t// \t} catch (error) {\r\n\t// \t\tconsole.log(error.message);\r\n\t// \t}\r\n\t// }, [year]);\r\n\r\n\t// to get the predicted value of a state\r\n\t// useEffect(() => {\r\n\t// \tconst url = \"http://localhost:8000\";\r\n\t// \tconst config = {\r\n\t// \t\t\"Content-Type\": \"application/json\",\r\n\t// \t\t\"Access-Control-Allow-Origin\": \"*\",\r\n\t// \t};\r\n\r\n\t// \ttry {\r\n\t// \t\tconst getOneStateDataOverYears = async () => {\r\n\t// \t\t\tconsole.log(region);\r\n\t// \t\t\tconst response = await axios.get(\r\n\t// \t\t\t\t`${url}/api/get-random-over?state=${region}&year=${year}`,\r\n\t// \t\t\t\tconfig\r\n\t// \t\t\t);\r\n\t// \t\t\tif (response.status === 200) {\r\n\t// \t\t\t\tsetPredicted({\r\n\t// \t\t\t\t\tx: Object.keys(years),\r\n\t// \t\t\t\t\ty: response.data.predictedValue,\r\n\t// \t\t\t\t\ttype: \"scatter\",\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\tconsole.log(response.data);\r\n\t// \t\t\t}\r\n\t// \t\t};\r\n\t// \t\tif (region) {\r\n\t// \t\t\tgetOneStateDataOverYears();\r\n\t// \t\t}\r\n\t// \t} catch (error) {\r\n\t// \t\tconsole.log(error.message);\r\n\t// \t}\r\n\t// }, [year, region]);\r\n\r\n\t// State wise Catboost regression\r\n\r\n\t// useEffect(() => {\r\n\t// \tconst url = \"http://localhost:8000\";\r\n\t// \tconst config = {\r\n\t// \t\t\"Content-Type\": \"application/json\",\r\n\t// \t\t\"Access-Control-Allow-Origin\": \"*\",\r\n\t// \t};\r\n\r\n\t// \ttry {\r\n\t// \t\tconst getOneStateDataOverYearsCB = async () => {\r\n\t// \t\t\tconsole.log(region);\r\n\t// \t\t\tconst response = await axios.get(\r\n\t// \t\t\t\t`${url}/api/get-cb-over?state=${region}&year=${year}`,\r\n\t// \t\t\t\tconfig\r\n\t// \t\t\t);\r\n\t// \t\t\tif (response.status === 200) {\r\n\t// \t\t\t\tsetPredicted({\r\n\t// \t\t\t\t\tx: Object.keys(years),\r\n\t// \t\t\t\t\ty: response.data.predictedValue,\r\n\t// \t\t\t\t\ttype: \"scatter\",\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\tconsole.log(response.data);\r\n\t// \t\t\t}\r\n\t// \t\t};\r\n\t// \t\tif (currentModel === \"CatBoost Regression\") {\r\n\t// \t\t\tgetOneStateDataOverYearsCB();\r\n\t// \t\t}\r\n\t// \t} catch (error) {\r\n\t// \t\tconsole.log(error.message);\r\n\t// \t}\r\n\t// }, [year, region, currentModel]);\r\n\r\n\t// FOr country wise catBoost regression\r\n\r\n\t// console.log(actual);\r\n\t// console.log(predicted);\r\n\r\n\t// const layout = {\r\n\t// \ttitle: `Plastic Prediction for Year: ${year}-${year + 1}`,\r\n\t// \theight: 600,\r\n\t// \twidth: 700,\r\n\t// };\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header home={home} />\r\n\t\t\t<div className=\"models\">\r\n\t\t\t\t<div className=\"models__dropdown\">\r\n\t\t\t\t\t<Dropdown setVariable={setYear} label={\"Years\"} labels={years} />\r\n\t\t\t\t\t{/* <Dropdown\r\n\t\t\t\t\t\tsetVariable={setRegion}\r\n\t\t\t\t\t\tlabel={\"Regions\"}\r\n\t\t\t\t\t\tlabels={regions}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Dropdown\r\n\t\t\t\t\t\tsetVariable={setCurrentModel}\r\n\t\t\t\t\t\tlabel=\"Models\"\r\n\t\t\t\t\t\tlabels={models}\r\n\t\t\t\t\t/> */}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"models__data\">\r\n\t\t\t\t\t<LinePlot />\r\n\t\t\t\t\t<Table row={rows} />\r\n\t\t\t\t\t<div className=\"models__plot\">\r\n\t\t\t\t\t\t{/* <LinePlot data={[predicted]} layout={layout} /> */}\r\n\r\n\t\t\t\t\t\t{/* <LinePlot\r\n\t\t\t\t\t\t\tmodel={currentModel}\r\n\t\t\t\t\t\t\tlabel={\"Country Wise Prediction of \"}\r\n\t\t\t\t\t\t\tactual={actual}\r\n\t\t\t\t\t\t\tpredicted={predicted}\r\n\t\t\t\t\t\t\tstate={region}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<section id=\"Landing__footer\">\r\n\t\t\t\t<div className=\"footer__container\">\r\n\t\t\t\t\t<Footer />\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Models;\r\n"]},"metadata":{},"sourceType":"module"}