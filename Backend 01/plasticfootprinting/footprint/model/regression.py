# -*- coding: utf-8 -*-
"""SGDregression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N8pXetAehSjimncUYRJFp45rC9GFSXCS
"""



"""**Importing The Libraries**"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import sys
np.set_printoptions(suppress=True, threshold=sys.maxsize)

"""**Uploading the dataset**"""

dataset = pd.read_csv('Data_For_Preprocessing - Sheet10.csv')

"""Beach Plastic Unit Conversion from KG to Tonnes"""

dataset['Beach_Plastics'] = dataset['Beach_Plastics'].div(1000)

"""**Inserting Plastic Production Classes**<br>
0 < Low < 10000<br>
10000 <= moderate < 100000<br>
100000<= high 
"""
"""**Handling Missing Values**

Recycling Units Column, Handling Missing Values
"""

dataset['Recycling_Units'] = [0]*len(dataset['Recycling_Units'])
"""Beach Plastic Column, Handling Missing Values"""

actual_mean = 4.507959682

"""Filling other cells in Beach Plastic column with 0"""

dataset['Beach_Plastics'].fillna(0, inplace = True)
# dataset[dataset['Year']=='2012-2013']
"""**Splitting dataset** into<br>
**Matrix Of Features** X (containing all independent variable columns)<br>
**and**<br>
**Dependent Vector** y (containing the dependent variable column)
"""
X = dataset.iloc[:, :-2].values
y = dataset.iloc[:, -2].values

"""Summer Temperature Column, Handling Missing Values"""
"""Spring Temperature Column, Handling Missing Values"""

"""Winter Temperature Column, Handling Missing Values"""
"""**Encoding Categorical Data Columns**

Academic Year Column, Encoding
"""
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

X[:, 1] = le.fit_transform(X[:, 1])

"""State Names Column, Encoding"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(sparse=False), [0])], remainder='passthrough')

X = np.array(ct.fit_transform(X))


"""**Train Test Split**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

"""**Feature Scaling**"""
import catboost as cb
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
train_dataset = cb.Pool(X_train, y_train) 
test_dataset = cb.Pool(X_test, y_test)
model = cb.CatBoostRegressor(loss_function='RMSE')
grid = {'iterations': [100, 150, 200],
        'learning_rate': [0.03, 0.1],
        'depth': [2, 4, 6, 8],
        'l2_leaf_reg': [0.2, 0.5, 1, 3]}
model.grid_search(grid, train_dataset)
pred = model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(y_test, pred)))
r2 = r2_score(y_test, pred)
print('Testing performance')
print('RMSE: {:.2f}'.format(rmse))
print('R2: {:.2f}'.format(r2))